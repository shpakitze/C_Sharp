//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IChatService", CallbackContract=typeof(ChatClient.ServiceReference1.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendUserMess")]
        void SendUserMess(string mess);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendUserMess")]
        System.Threading.Tasks.Task SendUserMessAsync(string mess);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMess")]
        void SendMess(string mess);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMess")]
        System.Threading.Tasks.Task SendMessAsync(string mess);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ConnectToChat", ReplyAction="http://tempuri.org/IChatService/ConnectToChatResponse")]
        string[] ConnectToChat(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/ConnectToChat", ReplyAction="http://tempuri.org/IChatService/ConnectToChatResponse")]
        System.Threading.Tasks.Task<string[]> ConnectToChatAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/DisconnectUser")]
        void DisconnectUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/DisconnectUser")]
        System.Threading.Tasks.Task DisconnectUserAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SystemBroadcastMess")]
        void SystemBroadcastMess(string mess);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SystemBroadcastMess")]
        System.Threading.Tasks.Task SystemBroadcastMessAsync(string mess);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/GetMess")]
        void GetMess(string mess);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/GetNewUser")]
        void GetNewUser(string name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/DelUser")]
        void DelUser(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ChatClient.ServiceReference1.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<ChatClient.ServiceReference1.IChatService>, ChatClient.ServiceReference1.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendUserMess(string mess) {
            base.Channel.SendUserMess(mess);
        }
        
        public System.Threading.Tasks.Task SendUserMessAsync(string mess) {
            return base.Channel.SendUserMessAsync(mess);
        }
        
        public void SendMess(string mess) {
            base.Channel.SendMess(mess);
        }
        
        public System.Threading.Tasks.Task SendMessAsync(string mess) {
            return base.Channel.SendMessAsync(mess);
        }
        
        public string[] ConnectToChat(string name) {
            return base.Channel.ConnectToChat(name);
        }
        
        public System.Threading.Tasks.Task<string[]> ConnectToChatAsync(string name) {
            return base.Channel.ConnectToChatAsync(name);
        }
        
        public void DisconnectUser(string name) {
            base.Channel.DisconnectUser(name);
        }
        
        public System.Threading.Tasks.Task DisconnectUserAsync(string name) {
            return base.Channel.DisconnectUserAsync(name);
        }
        
        public void SystemBroadcastMess(string mess) {
            base.Channel.SystemBroadcastMess(mess);
        }
        
        public System.Threading.Tasks.Task SystemBroadcastMessAsync(string mess) {
            return base.Channel.SystemBroadcastMessAsync(mess);
        }
    }
}
